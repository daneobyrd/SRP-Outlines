/*Source: https://github.com/Daniel-A-Gutierrez/URP-Tech-Art-Showcase/tree/master/Assets/wk1_kawase
Kawase compute implementation created in the video "Writing Render Passes Using the scriptable Render Pipeline in Unity"
Here: https://youtu.be/rimx8nnsbRs

His implementation is based on this fantastic Intel article about real-time gpu-based blurring
Here: https://www.intel.com/content/www/us/en/developer/articles/technical/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms.html
*/

#pragma kernel KBlur

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.universal/Shaders/PostProcessing/Common.hlsl"

TEXTURE2D(_Source);
RW_TEXTURE2D(float4, _Result);

CBUFFER_START(cb)
float offset;
float4 _Size;
CBUFFER_END

[numthreads(8, 8, 1)]
void KBlur(uint2 groupId : SV_GroupID,
           uint2 groupThreadId : SV_GroupThreadID,
           uint3 id : SV_DispatchThreadID)
{
    uint2 size = uint2(_Size.xy) - 1u;
    const float2 texelSize = 1.0f / _Size.xy;

    // ┌──┬──┬──┬──┐
    // ├─c00─┼─c01─┤
    // ├──┼──╬──┼──┤
    // ├─c10─┼─c11─┤
    // └──┴──┴──┴──┘

    static float2 skip[4] =
    {
        float2(-offset, offset), float2(offset, offset),
        float2(-offset, -offset), float2(offset, -offset)
    };
    
    const float2 c00 = float2(min(id.xy + skip[0], size) * texelSize);
    const float2 c01 = float2(min(id.xy + skip[1], size) * texelSize);
    const float2 c10 = float2(min(id.xy + skip[2], size) * texelSize);
    const float2 c11 = float2(min(id.xy + skip[3], size) * texelSize);

    // const float4 px = SAMPLE_TEXTURE2D_LOD(_Source, sampler_LinearClamp, id.xy, 0);
    const float4 p00 = SAMPLE_TEXTURE2D_LOD(_Source, sampler_LinearClamp, c00, 0);
    const float4 p01 = SAMPLE_TEXTURE2D_LOD(_Source, sampler_LinearClamp, c01, 0);
    const float4 p10 = SAMPLE_TEXTURE2D_LOD(_Source, sampler_LinearClamp, c10, 0);
    const float4 p11 = SAMPLE_TEXTURE2D_LOD(_Source, sampler_LinearClamp, c11, 0);

    _Result[id.xy] = float4((p00 + p10 + p11 + p01) / 4.0f);
}

//kawase : 0,1,2,2,3 at displacements 1.5,2.5,2.5,3.5
//want 2 kernels : one to copy in and downres, one to 
//https://developer.download.nvidia.com/cg/step.html
