#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#pragma kernel KLaplacian                           GROUP_SIZE=32   MAIN_LAPLACIAN=KLaplacian
#pragma kernel KComposite                           KERNEL_SIZE=8   MAIN_COMPOSITE=KComposite
// #define REGION_PER_THREAD 8

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "ComputeSampleArrays.hlsl"
#include "LaplacianFilters.hlsl"

CBUFFER_START(cb)
float4 _Size; // x: src width, y: src height, zw: unused
uint _KernelType;
CBUFFER_END

TEXTURE2D(Source);
RW_TEXTURE2D(float4, Result);
TEXTURE2D(CameraTex);

SamplerState sampler_LinearClamp;

float laplacian[] = {};
uint sample_size;
uint2 sample_points[] = {};


[numthreads(GROUP_SIZE, GROUP_SIZE, 1)] // Image should ba multiple of 32
void MAIN_LAPLACIAN(uint2 groupId : SV_GroupID, // ID of thread group; range depends on Dispatch call.
                    uint2 groupThreadId : SV_GroupThreadID, // ID of thread in a thread group; range depends on numthreads.
                    uint3 dispatchThreadID : SV_DispatchThreadID) // = SV_GroupID * numthreads + SV_GroupThreadID.
{
    switch (_KernelType)
    {
    case _KernelType == 330:
        get_330(sample_size, laplacian);
        get_sample_3x3(_Size, sample_points);
        break;
    case _KernelType == 331:
        get_331(sample_size, laplacian);
        get_sample_3x3(_Size, sample_points);
        break;
    case _KernelType == 332:
        get_332(sample_size, laplacian);
        get_sample_3x3(_Size, sample_points);
        break;
    case _KernelType == 333:
        get_333(sample_size, laplacian);
        get_sample_3x3(_Size, sample_points);
        break;
    case _KernelType == 550:
        get_550(sample_size, laplacian);
        get_sample_5x5(_Size, sample_points);
        break;
    case _KernelType == 551:
        get_551(sample_size, laplacian);
        get_sample_5x5(_Size, sample_points);
        break;
    case _KernelType == 770:
        get_770(sample_size, laplacian);
        get_sample_5x5(_Size, sample_points);
        break;
    default:
        _KernelType = 330;
        break;
    }

    float2 texelSize = float2(1.0 / _Size.xy);
    float2 uv = float2(dispatchThreadID.xy * texelSize);

    float4 outline_edge = float4(0, 0, 0, 0);
    // UNITY_UNROLL
    for (uint i = 0; i <= sample_size; ++i)
    {
        outline_edge += Source.SampleLevel(sampler_LinearClamp, uv + sample_points[i], 0) * laplacian[i];
    }

    Result[dispatchThreadID.xy] = float4(normalize(outline_edge));
}

[numthreads(KERNEL_SIZE, KERNEL_SIZE, 1)]
void MAIN_COMPOSITE(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    float2 texelSize = float2(1.0 / _Size.xy);
    float2 uv = float2(dispatchThreadID.xy * texelSize);

    Result[dispatchThreadID.xy] =
        Source.SampleLevel(sampler_LinearClamp, uv, 0) + CameraTex.SampleLevel(sampler_LinearClamp, uv, 0);
}
