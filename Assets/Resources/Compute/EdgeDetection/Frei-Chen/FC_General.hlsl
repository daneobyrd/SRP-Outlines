#ifndef FREI_CHEN_GENERAL_INCLUDED
#define FREI_CHEN_GENERAL_INCLUDED

// Generalization of Frei and Chen’s approach to extract the lines and edges of a digital image
// F. Moreno, S. Moreno, E. Cortes
// Published 10 February 2006

/*
2.1 Projection matrixes for 3 ×3 masks
Following with the proposal of Frei and Chen, we consider
edge, line and measurement subspaces formed by the vectors
of 2. To calculate the projection matrix onto the edge
subspace we use matrix B, whose columns are the vectors
given in masks g0, g1, g2 and g3, regardless of the layout
order The projection matrix onto the mentioned subspace is
obtained from the matrix product:

p_b = B(B^T * B)^−1 * B^T,

that is,
*/

/*
┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
│ 0.5 │  0  │  0  │  0  │  0  │  0  │  0  │  0  │ -.5 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │ 0.5 │  0  │  0  │  0  │  0  │  0  │ -.5 │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │  0  │ 0.5 │  0  │  0  │  0  │ -.5 │  0  │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │  0  │  0  │ 0.5 │  0  │ -.5 │  0  │  0  │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │  0  │  0  │ -.5 │  0  │ 0.5 │  0  │  0  │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │  0  │ -.5 │  0  │  0  │  0  │ 0.5 │  0  │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│  0  │ -.5 │  0  │  0  │  0  │  0  │  0  │ 0.5 │  0  │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ -.5 │  0  │  0  │  0  │  0  │  0  │  0  │  0  │ 0.5 │
└─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
*/
/*float p_b[81] =
{
    0.5, 0.0, 0.0, 0.0,  0, 0.0, 0.0, 0.0, -.5,
    0.0, 0.5, 0.0, 0.0,  0, 0.0, 0.0, -.5, 0.0,
    0.0, 0.0, 0.5, 0.0,  0, 0.0, -.5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.5,  0, -.5, 0.0, 0.0, 0.0,
      0,   0,   0,   0,  0,   0,   0,   0,   0,
    0.0, 0.0, 0.0, -.5,  0, 0.5, 0.0, 0.0, 0.0,
    0.0, 0.0, -.5, 0.0,  0, 0.0, 0.5, 0.0, 0.0,
    0.0, -.5, 0.0, 0.0,  0, 0.0, 0.0, 0.5, 0.0,
    -.5, 0.0, 0.0, 0.0,  0, 0.0, 0.0, 0.0, 0.5
};

float3x3 p_b_3x3 =
{
    0.5, 0 , -.5,
    0.0, 0 , 0.0,
    -.5, 0 , 0.5
};

float p_b_3[3] =
{
    0.5, 0, -0.5
};*/

// Split 9x9 into four 4x4 matrices and 1 cross-hair matrix

float4x4 p_b_m00 =
{
    0.5, 0.0, 0.0, 0.0,
    0.0, 0.5, 0.0, 0.0,
    0.0, 0.0, 0.5, 0.0,
    0.0, 0.0, 0.0, 0.5
};

float4x4 p_b_m05 =
{
    0.0, 0.0, 0.0, -.5,
    0.0, 0.0, -.5, 0.0,
    0.0, -.5, 0.0, 0.0,
    -.5, 0.0, 0.0, 0.0
};

float4x4 p_b_m45 =
{
    0.0, 0.0, 0.0, -.5,
    0.0, 0.0, -.5, 0.0,
    0.0, -.5, 0.0, 0.0,
    -.5, 0.0, 0.0, 0.0
};

float4x4 p_b_m50 =
{
    0.5, 0.0, 0.0, 0.0,
    0.0, 0.5, 0.0, 0.0,
    0.0, 0.0, 0.5, 0.0,
    0.0, 0.0, 0.0, 0.5
};

/*
Using the same reasoning for the line subspace, the
matrix whose columns are the vectors given by masks
g4, g5, g6 and g7, is called L. We obtain the projection matrix
onto the line subspace
*/

/*
┌──────┬──────┬──────┬──────┬──────┬──────┬──────┬──────┬──────┐
│ 7/18 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ -1/9 │ 7/18 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │ -1/9 │
├──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┼──────┤
│ 7/18 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ -1/9 │ 7/18 │
└──────┴──────┴──────┴──────┴──────┴──────┴──────┴──────┴──────┘
*/
/*
float p_l[81]
{
    0.3888, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, 0.3888, 
    -.1111, 0.3888, -.1111, -.1111, -.1111, -.1111, -.1111, 0.3888, -.1111, 
    -.1111, -.1111, 0.3888, -.1111, -.1111, -.1111, 0.3888, -.1111, -.1111, 
    -.1111, -.1111, -.1111, 0.3888, -.1111, 0.3888, -.1111, -.1111, -.1111, 
    -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111,
    -.1111, -.1111, -.1111, 0.3888, -.1111, 0.3888, -.1111, -.1111, -.1111, 
    -.1111, -.1111, 0.3888, -.1111, -.1111, -.1111, 0.3888, -.1111, -.1111, 
    -.1111, 0.3888, -.1111, -.1111, -.1111, -.1111, -.1111, 0.3888, -.1111, 
    0.3888, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, -.1111, 0.3888
};

float3x3 p_l_3x3 =
{
    0.3888, -.1111, 0.3888,
    -.1111, -.1111, -.1111,
    0.3888, -.1111, 0.3888,
};

float p_l_3[3] =
{
    0.3888, -.1111, 0.3888
};
*/

float4x4 p_l_m00 =
{
    0.3888, -.1111, -.1111, -.1111,
    -.1111, 0.3888, -.1111, -.1111,
    -.1111, -.1111, 0.3888, -.1111,
    -.1111, -.1111, -.1111, 0.3888
};

float4x4 p_l_m05 =
{
    -.1111, -.1111, -.1111, 0.3888,
    -.1111, -.1111, 0.3888, -.1111,
    -.1111, 0.3888, -.1111, -.1111,
    0.3888, -.1111, -.1111, -.1111
};

float4x4 p_l_m45 =
{
    -.1111, -.1111, -.1111, 0.3888,
    -.1111, -.1111, 0.3888, -.1111,
    -.1111, 0.3888, -.1111, -.1111,
    0.3888, -.1111, -.1111, -.1111
};

float4x4 p_l_m50 =
{
    0.3888, -.1111, -.1111, -.1111,
    -.1111, 0.3888, -.1111, -.1111,
    -.1111, -.1111, 0.3888, -.1111,
    -.1111, -.1111, -.1111, 0.3888
};

/*
For the measurement subspace, the projection matrix
will be
*/

/*
┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤
│ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │ 1/9 │
└─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
*/
/*
float p_m[81]
{
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111, 0.1111
};
*/

float4x4 p_m_4x4 =
{
    0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111,
    0.1111, 0.1111, 0.1111, 0.1111
};

/*
The results for the projection matrices onto the edge and
line subspaces can be generalized to any subspace whose
basis vector satisfy the masks conditions for line and edge
detection, i.e., that their components sum up zero and that
they observe a certain symmetry. For the edge detecting
masks the symmetric components are opposed and for the
line detecting masks, they are equal. Consequently, the central
component is null for the former, and it is opposed to the
sum of them all for the latter.
*/
#endif