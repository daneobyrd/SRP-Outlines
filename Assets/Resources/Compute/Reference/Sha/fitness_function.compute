// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CS_Fitness_Per_Pixel
#pragma kernel CS_Sum_Rows
#pragma kernel CS_Sum_Column


// ----------------------------------------------------------------------------------------------------
// Resources for all the Kernels
RWStructuredBuffer<float2>    _per_pixel_fitness_buffer;                                                 // Holds the fitness of each pixel of the attempt
                                                                                                         
RWTexture2D<float4>          _debug_texture;                                                             // you can use this to debug out the content of _per_pixel_fitness_buffer
                                                                                                         
int                          _image_width;                                                               // global image einformation
int                          _image_height;                                                              // global image einformation
int                          _population_id_handel;                                                      // The handel of the population which is currently being rendererd
// ---------------------------------------------------------------------------------------------------   
// Resources for CS_Fitness_Per_Pixel                                                                    
Texture2D<float4>            _original;                                                                  // the original image we want to replicate. The pixels in this image are used to calculated the fitness of each population
Texture2D<float4>            _original_gradient;                                                         // a processed version of the original image which has the gradient in each pixel calculated by the sobel filter instead of the rgb value. This might have gone first through a gaussian filter to filter smaller features
Texture2D<float4>            _forged;                                                                    // What coames out of the render pipline, it is the visualisation of the population which gets compared to the original

SamplerState                 sampler_original;
SamplerState                 sampler_forged;
SamplerState                 sampler_original_gradient;

float _Luminacity_weight;
float _Color_weight;

float _mask_active;

// ---------------------------------------------------------------------------------------------------
// Resources for CS_Sum_Rows
RWStructuredBuffer <float2>   _rows_sums_array;                                                          // To take the average fitness of a population, we fist sum up each row to a single value and save in this buffer

// ---------------------------------------------------------------------------------------------------
// Resources for CS_Sum_Columns
RWStructuredBuffer <float2>   _population_fitness_array;                                                 // this buffer holds one fitness value per population member. The _population_id_handel is used to write to this buffer for each population member


// ===================================================================================================

inline int texture_pixel_to_structured_buffer_ID(uint2 texture_pixel) {                                  // Converts xy pixel coordinates to a one dimensional id. It is a classic 2d to 1d index conversion
    return _image_width * texture_pixel.y + texture_pixel.x;
}

inline int2 structured_buffer_id_to_texture_pixel(int structured_buffer_id) {                            // Does the opposite as above, converts 1D ids in too 2D coordinates
    int y = floor(structured_buffer_id / _image_width);
    int x = fmod(structured_buffer_id, _image_width);
    return int2(x,y);
}


#include "LabColorSpace.hlsl"

[numthreads(32,32,1)]                                                                                    // image dimensions should be a multiplye of 32 or power of 2. 1024 threads per group
void CS_Fitness_Per_Pixel(uint3 id : SV_DispatchThreadID)                                                
{                                                                                                        

    float2 texutre_coordinates = float2((float)id.x / (float)_image_width,                               
                                        (float)id.y / (float)_image_height);                             


    float3 origina_gradient   = _original_gradient.SampleLevel(sampler_original_gradient, texutre_coordinates, 0).xyz;
           origina_gradient.x = max(_mask_active,
               max(origina_gradient.x, max(origina_gradient.y, origina_gradient.z)));                    // The mask is calcualted per color channel, I average it out before apply it uniformly to all 3 channels

    float3 original_color = _original.SampleLevel(sampler_original, texutre_coordinates, 0).xyz;
           original_color = rgb2lab(original_color);

    float3 forged_color   = _forged.SampleLevel(sampler_forged, texutre_coordinates, 0).xyz;
           forged_color   = rgb2lab(forged_color);

    float3 fittness_color = 1. - saturate(abs(original_color - forged_color)) ;                          // The Eculidean distance in CIELab space is used to measure the fitness. Lab space has the advantage that is a perceptually uniform color space and produces more accurate fitness 
           fittness_color = pow(fittness_color, 4.);                                                     // The power here artificially increases the difference between diferent fitnesses. Higher power is more expensive, means getting faster to the results, and increases the chance of getting stuck in a local minima

    int   structured_buffer_ID = texture_pixel_to_structured_buffer_ID(id.xy); 
    float maximum_fitness      = (_Luminacity_weight + 2*_Color_weight) * origina_gradient.x;            // The maximum potential fitness of each pixel is passed on further to be able to do things like normalizing the fitness scores to 0-1
                                
    float pixel_fitness = ((fittness_color.x *_Luminacity_weight 
                          + fittness_color.y *_Color_weight                                              // The weight of the luminacity and hue/saturation are different to allow for some artisitc control over the percision of each component
                          + fittness_color.z *_Color_weight) * origina_gradient.x);

    _per_pixel_fitness_buffer[structured_buffer_ID] = float2( pixel_fitness, maximum_fitness);  
  
}



// ----------------------------------------------------------------------------------------------------



[numthreads(64, 1, 1)]                                                                                   // image dimensions should be a multiplye of 64 or power of 2. 64 threads per group
void CS_Sum_Rows(uint3 id : SV_DispatchThreadID)                                                         
{                                                                                                        
                                                                                                         
    int2   texutre_pixel = int2( 0, id.x);                                                                
    float2 sum           = float2(0.0f, 0.0f);                                                                          
                                                                                                         
    for (int i = 0; i < _image_width; i++) {                                                             
                texutre_pixel.x      = i;                                                                
        int     structured_buffer_id = texture_pixel_to_structured_buffer_ID(texutre_pixel.xy);
                sum                 += _per_pixel_fitness_buffer[structured_buffer_id];
    }                                                                                                    
    _rows_sums_array[id.x] = sum;                                                                        
}                                                                                                        
                                                                                                         
// ----------------------------------------------------------------------------------------------------  
                                                                                                         
[numthreads(1, 1, 1)]                                                                                    //  only one thread is enough to sum all the columns                                                                   
void CS_Sum_Column(uint3 id : SV_DispatchThreadID)                                                       
{                                                                                                        
    float2 sum = float2(0.0f, 0.0f);
    for (int i = 0; i < _image_height; i++) {                                                            
        sum += _rows_sums_array[i];                                                                      
    }                                                                                                    
                    
    _population_fitness_array[_population_id_handel] = sum;                                         

}





