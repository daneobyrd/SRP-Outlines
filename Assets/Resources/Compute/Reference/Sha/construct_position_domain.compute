#pragma kernel CS_Construct_Position_Domain
#pragma kernel CS_Debug_Position_Domain
#pragma kernel CS_Debug_Position_Domain_to_Texture

// ----------------------------------------------------------------------------------------------------
// Resources for all the Kernels

Texture2D<float4>              _mask;                                        // This mask is either created by hand and passed on to the settings or automaticly created by a combination of gaussian sobel filter. It signifies important areas, where it s white, the algo will focus on that
SamplerState                   sampler_mask;                                 
                                                                             
AppendStructuredBuffer<float2> _position_domain_buffer;                      // This is an Append Buffer, the position of the pixels that are white on the mask are appended to this buffer, which is used to generate the brush strokes
                                                                             
                                                                             
int                            _image_width;                                 
int                            _image_height;                                
                                                                             
float                          _sample_threshold = 0.07;                     // Any number higher than this value is considered as a white pixel on the mask, which the algo should focus on. The value itself is set in the settings 

// ----------------------------------------------------------------------------------------------------

[numthreads(8,8,1)]                                                          // 8 in 8 groups, one thread corresponds to a single pixel on the mask image
void CS_Construct_Position_Domain(uint3 id : SV_DispatchThreadID)
{
   float2 texutre_coordinates = float2((float)id.x / (float)_image_width,            
                                       (float)id.y / (float)_image_height);     

   float3 mask   = _mask.SampleLevel(sampler_mask, texutre_coordinates, 0).xyz;
          mask.r =  mask.r*0.33 + mask.g*0.33 + mask.b*0.33;

   if (mask.r > _sample_threshold) 
   {
      
      

#if SHADER_API_D3D11 || SHADER_API_D3D11_9X

       _position_domain_buffer.Append
       (float2(texutre_coordinates.x, 1. - texutre_coordinates.y));          // The sampleLevel method is actually flipping the y/v axis upside down. I am on Direct3D 11, on different platform the -1 I added here might need to go away

#else         
       _position_domain_buffer.Append
       (float2(texutre_coordinates.x, texutre_coordinates.y));

#endif

   }
}


RWTexture2D<float4>            _position_domain_visualiser;                  // This texture is used to visualise which pixels pass the threshold test. Any pixel white on this texture is an area which the algo will focus on on its search

[numthreads(8, 8, 1)]                                                        // 8 in 8 groups, one thread corresponds to a single pixel on the mask image
void CS_Debug_Position_Domain_to_Texture(uint3 id : SV_DispatchThreadID)
{
    float2 texutre_coordinates = float2((float)id.x / (float)_image_width,
        (float)id.y / (float)_image_height);

    float3 mask = _mask.SampleLevel(sampler_mask, texutre_coordinates, 0).xyz;
    mask.r = mask.r*0.33+mask.g*0.33+ mask.b*0.33;
    float out_color = 0.0;
    if (mask.r > _sample_threshold)
    {
        out_color = 1.0;
    }

    _position_domain_visualiser[id.xy] = float4(out_color.xxxx);
}






// ----------------------------------------------------------------------------------------------------
// DEBUG

// The below macro is used to get a random number which varies across different generations. 

#define rnd(seed, constant)  wang_rnd(seed +triple32(_generation_seed) * constant) 

uint triple32(uint x)
{
    x ^= x >> 17;
    x *= 0xed5ad4bbU;
    x ^= x >> 11;
    x *= 0xac4c1b51U;
    x ^= x >> 15;
    x *= 0x31848babU;
    x ^= x >> 14;
    return x;
}

float wang_rnd(uint seed)
{
    uint rndint = triple32(seed);
    return ((float)rndint) / float(0xFFFFFFFF);                                                       // 0xFFFFFFFF is max unsigned integer in hexa decimal
}

// ------------

StructuredBuffer<float2>       _R_position_domain_buffer;
StructuredBuffer<int4>         _position_domain_argument_buffer;
RWStructuredBuffer<float2>     _debug_position_buffer;

uint _generation_seed;

[numthreads(64, 1, 1)]                                                                               //64 in 1 groups, one thread corresponds to a single point used to visualise position search domain
void CS_Debug_Position_Domain(uint3 id : SV_DispatchThreadID)
{
    int position_domain_length = _position_domain_argument_buffer[0].x;
    float rn  = rnd(id.x, 82);
    //float rn2 = rnd(id.x, 13);
    int pos_domain_id = (int) floor(rn* (float)position_domain_length);

    _debug_position_buffer[id.x] = _R_position_domain_buffer[pos_domain_id] * 2.0 - 1.0;
   // _debug_position_buffer[id.x] =float2(rn, rn2) *2.0 -1.0;
}